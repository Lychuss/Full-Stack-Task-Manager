<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>taskmanager</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>taskmanager</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>21</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
package com.example.taskmanager;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class TaskmanagerApplication {

	public static void main(String[] args) {
		SpringApplication.run(TaskmanagerApplication.class, args);
	}

}
package com.example.taskmanager.Configuration;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class TaskConfiguration implements WebMvcConfigurer{

    @Override
    public void addCorsMappings(CorsRegistry registry){
        registry.addMapping("/**")
            .allowedOrigins("http://127.0.0.1:5500")
            .allowedMethods("GET", "POST", "PUT", "DELETE");
    }
}
package com.example.taskmanager.Controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.taskmanager.Model.Task;
import com.example.taskmanager.Service.TaskService;

import lombok.RequiredArgsConstructor;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

@RestController
@RequiredArgsConstructor
@RequestMapping(path= "first/api/taskmanager")
public class TaskController {

    private final TaskService service;

    @GetMapping()
    public ResponseEntity<Map<String, String>> welcome() {
        Map<String, String> body = new HashMap<>();
        body.put("message", "Welcome to my task manager");
        return ResponseEntity.ok(body);
    }

    @GetMapping("/alltasks")
    public ResponseEntity<List<Task>> getTask(){
        return ResponseEntity.ok(service.getTask());
    }

    
    @PostMapping("/tasks")
    public ResponseEntity<String> addTask(@RequestBody Task tasks) {
        if(service.addTask(tasks)){
            return ResponseEntity.ok("Task has added!");
        }
        return new ResponseEntity<>("Cannot be add task!", HttpStatus.NOT_ACCEPTABLE);
    }

    @DeleteMapping("/delete={id}")
    public ResponseEntity<String> deleteTask(@PathVariable int id){
        if(service.removeTask(id)){
            return ResponseEntity.ok("Task has removed!");
        }
        return new ResponseEntity<>("Cannot be removed!", HttpStatus.NOT_ACCEPTABLE);
    }
    
}
package com.example.taskmanager.Model;

import org.antlr.v4.runtime.misc.NotNull;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Table(name= "tasks")
@Entity
public class Task {
    
    @Id
    @GeneratedValue(strategy= GenerationType.IDENTITY)
    private int id;
    
    @NotNull
    private String tasks;
}
package com.example.taskmanager.Repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import com.example.taskmanager.Model.Task;

@Repository
public interface TaskRepository extends JpaRepository<Task, Integer>{

    @Query("SELECT s FROM Task s WHERE s.id = ?1")
        Optional<Task> findTaskById (int id);

    @Query("SELECT s FROM Task s WHERE s.tasks = ?1")
        Optional<Task> findTaskByTasks (String tasks);
}
package com.example.taskmanager.Service;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.example.taskmanager.Model.Task;
import com.example.taskmanager.Repository.TaskRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class TaskService {
    
    private final TaskRepository repository;

    public boolean addTask(Task tasks){
       Optional<Task> task = repository.findTaskByTasks(tasks.getTasks());
        if(task.isPresent()){
            throw new IllegalStateException("Already added");
        }
        repository.save(tasks);
        return true;
    }

    public boolean removeTask(int id){
        Task task = repository.findTaskById(id).get();
        if(task == null ){
            throw new IllegalStateException("There is no task to delete");
        }
        repository.delete(task);
        return true;
    }

    public List<Task> getTask() {
        return repository.findAll();
    }
}
spring:
  datasource:
    url: "jdbc:mysql://localhost:3306/taskmanager?useSSL=false&serverTimezone=UTC"
    username: root
    password: "Tokitoclaude0907@"
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
package com.example.taskmanager;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class TaskmanagerApplicationTests {

	@Test
	void contextLoads() {
	}

}
spring:
  datasource:
    url: "jdbc:mysql://localhost:3306/taskmanager?useSSL=false&serverTimezone=UTC"
    username: root
    password: "Tokitoclaude0907@"
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
import * as service from '../FrontEnd/service.js';

service.addList();

const addTaskBtn = document.getElementById("addTaskBtn");
const ulList = document.getElementById("taskList");

addTaskBtn.addEventListener("click", () => {
   service.addTask();
});

ulList.addEventListener("click", function(event){
    service.doneTasks(event);
});
const taskField = document.getElementById("taskField");
const ulList = document.getElementById("taskList");

const tasks = localStorage.getItem("tasks");
let array = tasks ? JSON.parse(tasks) : [];

await fetchDisplay();
addList();

export async function addTask() {
    const task = {
        tasks: '',
    }

    if (taskField.value != '') {
         task.tasks = taskField.value;
         await fetchAdd(task);
         await fetchDisplay();
         addList();
    } else {
        alert("You must input value!");
    }
}

export function addList() {
    ulList.innerHTML = '';
    for(const task of array){
        const element = document.createElement("li");
        const button = document.createElement("button");

        button.className = "delete-btn";
        button.id = task.id;
        button.innerText = "Done";

        element.id = task.id;
        element.textContent = task.tasks;

        console.log(task.tasks);

        ulList.appendChild(element).appendChild(button);
    }
}

export async function doneTasks(event){
    if(event.target.classList.contains("delete-btn")){
        event.target.parentElement.remove();
        const remove = event.target.id;
        await fetchDelete(remove);
    }
}

async function fetchAdd(task) {
    const response = await fetch("http://localhost:8080/first/api/taskmanager/tasks", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(task)
    });
}

async function fetchDisplay(){
    const response = await fetch("http://localhost:8080/first/api/taskmanager/alltasks");
    const data = await response.json();
    array = data;
    console.log(data);
    return data;
}

async function fetchDelete(id){
    const response = await(fetch(`http://localhost:8080/first/api/taskmanager/delete=${id}`, {
        method: "DELETE"
    }));
   await fetchDisplay();
   await addList();
}<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Manager</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1 id="header"></h1>
        <div class="task-input">
            <input type="text" id="taskField" placeholder="Enter a new task...">
            <button id="addTaskBtn">Add Task</button>
        </div>
        <ul id="taskList">
            <!-- Tasks will be added here dynamically -->
        </ul>
    </div>
    <script type="module" src="script.js"></script>
</body>
</html>body {
    font-family: Arial, sans-serif;
    background-color: #f4f7fa;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    margin: 0;
}

.container {
    background: white;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
}

h1 {
    font-size: 25px;
    text-align: center;
    color: #333;
}

.task-input {
    display: flex;
    gap: 10px;
}

.task-input input {
    flex: 1;
    padding: 10px;
    border: 2px solid #ddd;
    border-radius: 6px;
}

.task-input button {
    padding: 10px 15px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background 0.3s;
}

.task-input button:hover {
    background-color: #45a049;
}

#taskList li {
    background-color: #f9f9f9;
    padding: 10px;
    margin-bottom: 8px;
    border-radius: 6px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}


#taskList li {
    background-color: #f9f9f9;
    padding: 10px;
    margin-bottom: 8px;
    border-radius: 6px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.delete-btn {
    background-color: #ff4d4d;
    border: none;
    padding: 5px 8px;
    border-radius: 4px;
    color: white;
    cursor: pointer;
    transition: background 0.3s;
}

.delete-btn:hover {
    background-color: #e60000;
}

